#!/usr/bin/env bash

set -euo pipefail

declare -r UTILITY_CONTEXT=skillshare-utility
declare -r PROD_CONTEXT=skillshare-prod
declare -r STAGING_CONTEXT=skillshare-staging
declare -r SANDBOX_CONTEXT=skillshare-sandbox
declare -r QA_CONTEXT=skillshare-qa
declare -r DATA_SCIENCE_CONTEXT=skillshare-data-science

logs() {
	local OPTIND selector namespace context

	local -a stern_args

	while getopts ':e:s:' opt; do
		case "${opt}" in
			e)
				case "${OPTARG}" in
					qa*)
						namespace="${OPTARG}"
						context="${QA_CONTEXT}"
						;;
					stag*)
						context="${STAGING_CONTEXT}"
						;;
					prod*)
						context="${PROD_CONTEXT}"
						;;
					*)
						echo "Unknown environment: ${OPTARG}" 1>&2
						return 1
						;;
				esac
				;;
			s)
				case "${OPTARG}" in
					chatops)
						selector="app=chatops"
						context="${UTILITY_CONTEXT}"
						;;
					api|skillshare-api)
						selector="component=api"
						;;
					resque*)
						selector="component=resque-worker"
						;;
					php-fpm*)
						selector="component=php-fpm"
						;;
					*)
						echo "Unknown app: ${1:-}" 1>&2
						return 1
						;;
				esac
				;;
			\?)
				echo "Invalid option: ${OPTARG}" 1>&2
				return 1
				;;
			:)
				echo "${OPTARG} requires an argument" 1>&2
				return 1
				;;
		esac
	done

	shift $((OPTIND-1))

	if [ -z "${context}" ]; then
		echo "-e required" 1>&2
		return 1
	fi

	if [ -n "${selector:-}" ]; then
		stern_args+=( -l "${selector}" )
	else
		stern_args+=( '.*' )
	fi

	stern_args+=( --context "${context}" )

	if [ -n "${namespace:-}" ]; then
		stern_args+=( -n "${namespace}" )
	fi

	stern_args+=( --exclude-container metrics )

	exec stern "${stern_args[@]}" "$@"
}

get_env() {
	local OPTIND namespace context selector scratch

	case "${1:-}" in
		api|skillshare-api)
			selector="component=api"
			;;
		nginx)
			selector="component=nginx"
			;;
		php*)
			selector="component=php-fpm"
			;;
		resque*)
			selector="component=resque-worker"
			;;
		cron*)
			selector="component=php-cronjob"
			;;
		critic|conductor|maestro|pupil)
			selector="component=${1}"
			;;
		web|skillshare-web)
			selector="component=web"
			;;
		chatops)
			selector="app=chatops"
			context="${UTILITY_CONTEXT}"
			namespace=tools
			;;
		*)
			echo "Unknown app: ${1:-}" 1>&2
			return 1
			;;
	esac

	shift

	while getopts ':e:' opt; do
		case "${opt}" in
			e)
				case "${OPTARG}" in
					qa*)
						namespace="${OPTARG}"
						context="${QA_CONTEXT}"
						;;
					prod*)
						namespace="prod"
						context="${PROD_CONTEXT}"
						;;
					stag*)
						namespace="staging"
						context="${STAGING_CONTEXT}"
						;;
					*)
						echo "Unknown environment: ${OPTARG}" 1>&2
						return 1
						;;
					esac
				;;
			\?)
				echo "Invalid option: ${OPTARG}" 1>&2
				return 1
				;;
			:)
				echo "${OPTARG} requires an argument" 1>&2
				return 1
				;;
		esac
	done

	shift $((OPTIND-1))

	scratch="$(mktemp)"

	kubectl get pods \
		-l "${selector}" \
		-n "${namespace}" \
		--context \
		"${context}" \
		--output=jsonpath='{.items[*].metadata.name}' \
		| cut -d ' ' -f 1 > "${scratch}"

	if [ ! -s "${scratch}" ]; then
		echo "No pods found" 1>&2;
		return 1
	fi

	kubectl exec -it -n "${namespace}" --context "${context}" "$(cat "${scratch}")" env | sort
}

open_console() {
	local OPTIND namespace context selector scratch container

	case "${1:-}" in
		skillshare)
			selector="component=php-fpm"
			container=php-fpm
			;;
		nginx)
			selector="component=nginx"
			container=nginx
			;;
		chatops)
			selector="app=chatops"
			container=app
			context="${UTILITY_CONTEXT}"
			namespace=tools
			;;
		*)
			echo "Unknown app: ${1:-}" 1>&2
			return 1
			;;
	esac

	shift

	while getopts ':e:' opt; do
		case "${opt}" in
			e)
				case "${OPTARG}" in
					qa*)
						namespace="${OPTARG}"
						context="${QA_CONTEXT}"
						;;
					prod*)
						namespace=prod
						context="${PROD_CONTEXT}"
						;;
					*)
						echo "Unknown environment: ${OPTARG}" 1>&2
						return 1
						;;
					esac
				;;
			\?)
				echo "Invalid option: ${OPTARG}" 1>&2
				return 1
				;;
			:)
				echo "${OPTARG} requires an argument" 1>&2
				return 1
				;;
		esac
	done

	shift $((OPTIND-1))

	scratch="$(mktemp)"

	kubectl get pods \
		-l "${selector}" \
		-n "${namespace}" \
		--context \
		"${context}" \
		--output=jsonpath='{.items[*].metadata.name}' \
		| cut -d ' ' -f 1 > "${scratch}"

	if [ ! -s "${scratch}" ]; then
		echo "No pods found" 1>&2;
		return 1
	fi

	exec kubectl exec \
		-it \
		-c "${container}" \
		-n "${namespace}" \
		--context "${context}" \
		"$(cat "${scratch}")" \
		-- sh
}

harness_helper() {
	local OPTIND

	case "${1:-}" in
		lint)
			exec docker-compose \
				-f "${S_SRC_DIR}/skillshare/docker-library/docker-compose.yml" \
				run \
				--rm -v "${PWD}:/data" \
				-w /data \
				harness-lint \
				harness-lint harness
			;;
		ssh-keygen)
			shift
			ssh-keygen -t RSA -m PEM -C 'Harness.io' "$@"
			;;
		*)
			echo "Unknown command: ${1:-}" 1>&2
			return 1
			;;
	esac
}

ecr_login() {
	source <(aws --profile skillshare-production ecr get-login --no-include-email)
	source <(aws --profile skillshare-utility ecr get-login --no-include-email)
}

main() {
	case "${1:-}" in
		qa*)
			local namespace="${1}"
			shift
			kubectl --context "${QA_CONTEXT}" -n "${namespace}" "$@"
			;;
		sandbox*)
			local namespace="${1}"
			shift
			kubectl --context "${SANDBOX_CONTEXT}" -n "${namespace}" "$@"
			;;
		prod|production)
			shift
			kubectl --context "${PROD_CONTEXT}" "$@"
			;;
		staging)
			shift
			kubectl --context "${STAGING_CONTEXT}" "$@"
			;;
		util*)
			shift
			kubectl --context "${UTILITY_CONTEXT}" "$@"
			;;
		ds)
			shift
			kubectl --context "${DATA_SCIENCE_CONTEXT}" "$@"
			;;
		env)
			shift
			get_env "$@"
			;;
		logs)
			shift
			logs "$@"
			;;
		console|shell)
			shift
			open_console "$@"
			;;
		harness)
			shift
			harness_helper "$@"
			;;
		tt)
			shift
			export TIMETRAP_SHEET=skillshare
			timetrap "$@"
			;;
		github)
			shift
			curl -u "ahawkins:${SKILLSHARE_GITHUB_ACCESS_TOKEN}" "$@"
			;;
		ecr-login)
			shift
			ecr_login "$@"
			;;
		mk|minikube)
			shift
			# Set Kubectl verison required for Minikube
			export ASDF_KUBECTL_VERSION=1.7.0
			kubectl --context minikube "$@"
			;;
		*)
			echo "Unknown command: $*" 1>&2
			return 1
			;;
	esac
}

main "$@"
